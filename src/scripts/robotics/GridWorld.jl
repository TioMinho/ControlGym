# == Libraries ==
using LinearAlgebra, Distributions, StatsBase, Random
using PaddedViews

folders = (@__DIR__).*["/MDP", "/utils"]
for folder in folders;	for file in readdir(folder)
	include(folder*"/"*file)
end; end

# =====

# == Functions ==
function T(s‚Çñ,a‚Çñ,s‚Çñ‚Çä‚ÇÅ; mask=zeros(5,5))
	a‚Çñ_dir =  round.([-sin(œÄ/2*a‚Çñ); -cos(œÄ/2*a‚Çñ)])
	a‚Çñ_err1 = round.([+cos(œÄ/2*a‚Çñ); -sin(œÄ/2*a‚Çñ)])
	a‚Çñ_err2 = round.([-cos(œÄ/2*a‚Çñ); +sin(œÄ/2*a‚Çñ)])

	if 	   (s‚Çñ‚Çä‚ÇÅ == s‚Çñ+a‚Çñ_dir);  return 0.8*mask[s‚Çñ‚Çä‚ÇÅ...]
	elseif (s‚Çñ‚Çä‚ÇÅ == s‚Çñ+a‚Çñ_err1); return 0.1*mask[s‚Çñ‚Çä‚ÇÅ...]
	elseif (s‚Çñ‚Çä‚ÇÅ == s‚Çñ+a‚Çñ_err2); return 0.1*mask[s‚Çñ‚Çä‚ÇÅ...]
	end

	return 0;
end

function R(s‚Çñ,a‚Çñ,s‚Çñ‚Çä‚ÇÅ; mask=zeros(5,5))
	a‚Çñ_dir =  round.([-sin(œÄ/2*a‚Çñ); -cos(œÄ/2*a‚Çñ)])
	a‚Çñ_err1 = round.([+cos(œÄ/2*a‚Çñ); -sin(œÄ/2*a‚Çñ)])
	a‚Çñ_err2 = round.([-cos(œÄ/2*a‚Çñ); +sin(œÄ/2*a‚Çñ)])

	if 	   (s‚Çñ‚Çä‚ÇÅ == s‚Çñ+a‚Çñ_dir);  return mask[s‚Çñ‚Çä‚ÇÅ...]
	elseif (s‚Çñ‚Çä‚ÇÅ == s‚Çñ+a‚Çñ_err1); return mask[s‚Çñ‚Çä‚ÇÅ...]
	elseif (s‚Çñ‚Çä‚ÇÅ == s‚Çñ+a‚Çñ_err2); return mask[s‚Çñ‚Çä‚ÇÅ...]
	end

	return 0;
end

# =====

# == Variables ==
# Definition of the GridWorld and its dimensions
grid = """......
		  ..x...
		  .xx...
		  ......
		  xxx.xo"""

N‚Çì, N·µß = [length(split(grid, "\n")) length(split(grid, "\n")[1])]
maskT = PaddedView(0, ones(N·µß, N‚Çì)', (0:N‚Çì+1, 0:N·µß+1))
maskR = PaddedView(-1, reshape([Int(p=='o')-Int(p=='x') for p in replace(grid,r"\n" => "")], N·µß, N‚Çì)', (0:N‚Çì+1, 0:N·µß+1))

# The State (ùì¢) and Action (ùìê) domains
ùì¢, ùìê = [Iterators.product(1:N‚Çì, 1:N·µß)|>collect, 1:4|>collect]

# Alias for the Transition and Reward functions given the GridWorld
T(s‚Çñ,a‚Çñ,s‚Çñ‚Çä‚ÇÅ) = T(s‚Çñ,a‚Çñ,s‚Çñ‚Çä‚ÇÅ, mask=maskT)
R(s‚Çñ,a‚Çñ,s‚Çñ‚Çä‚ÇÅ) = R(s‚Çñ,a‚Çñ,s‚Çñ‚Çä‚ÇÅ, mask=maskR)

# =====

# == Script ==
(V, VÀ£) = ValueIteration(T, R, [ùì¢, ùìê], 0.9, it=50)
plotGridWorld(grid, V)
