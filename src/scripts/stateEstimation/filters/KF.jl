# ==== Libraries ====
using LinearAlgebra, Distributions, StatsBase, Random, PDMats

import Base: *
*(v::Any, Œ£::PDMats.PDiagMat{Float64,Array{Float64,1}}) = v*(Œ£*I(size(Œ£,1)))
*(v::Array{Float64,2}, Œ£::PDMats.PDiagMat{Float64,Array{Float64,1}}) = v*(Œ£*I(size(Œ£,1)))
*(v::Any, Œ£::PDMat{Float64,Array{Float64,2}}) = v*(Œ£*I(size(Œ£,1)))
*(v::Array{Float64,2}, Œ£::PDMat{Float64,Array{Float64,2}}) = v*(Œ£*I(size(Œ£,1)))

# ===================

# ==== Functions ====
"""	(X‚Çë,Œº,Œ£) = KF(SYS,Y,U,T,X‚ÇÄ,Q,R)

Solves a state estimation problem using the Kalman Filter (KF).
Consider the stochastic linear discrete-time state-space system
		x‚Çñ‚Çä‚ÇÅ = Ax‚Çñ + Bu‚Çñ + v‚Çñ,		v‚Çñ ~ ùìù(0,Q)
		y‚Çñ   = Cx‚Çñ       + z‚Çñ,		z‚Çñ ~ ùìù(0,R)
with prior distribution x‚ÇÄ ~ ùìù(Œº‚ÇÄ,Œ£‚ÇÄ).
The KF exactly solves the filtering distribution x‚Çñ ~ p(x‚Çñ|y‚ÇÄ,‚ãØ,y‚Çñ) = ùìù(Œº‚Çñ,Œ£‚Çñ)
using a Bayesian approach:
	1) Compute the predictive distribution
		X‚Çö ~ p(x‚Çñ|y‚ÇÅ,‚ãØ,y‚Çñ‚Çã‚ÇÅ) = ùìù(Œº‚Åª‚Çñ,Œ£‚Åª‚Çñ) = ùìù(Ax‚Çñ‚Çã‚ÇÅ+Bu‚Çñ‚Çã‚ÇÅ, A*Œ£‚Çñ‚Çã‚ÇÅ*A·µÄ + Q)
	2) Use Bayes' rule to compute the filtering distribution
		X‚Çö ~ p(x‚Çñ|y‚ÇÅ,‚ãØ,y‚Çñ)   = ùìù(Œº‚Çñ,Œ£‚Çñ)   = ùìù(Œº‚Åª‚Çñ+K‚Çñ(y‚Çñ-CŒº‚Åª‚Çñ), Œ£‚Åª‚Çñ+K‚Çñ(CŒ£‚Åª‚ÇñC·µÄ+R)K‚Çñ·µÄ)
	   with K‚Çñ = Œ£‚Åª‚Çñ C·µÄ(C·µÄŒ£‚Åª‚ÇñC·µÄ+R)‚Åª¬π, the optimal Kalman estimator.
"""
function KF(sys, y, u, t, x‚ÇÄ, Q, R)
	# Auxiliary variables
	(~,~,A,B,C,Œît,N‚Çì,N·µß,N·µ§) = sys
	t = t[1]:Œît:t[end]

	Œº = zeros(N‚Çì,     length(t))
	Œ£ = zeros(N‚Çì, N‚Çì, length(t))

	# Auxiliary functions
	K(S‚Åª‚Çñ) = S‚Åª‚Çñ * C'*(C*S‚Åª‚Çñ*C' + R)^(-1)	# Optimal Kalman Gain

	# == KALMAN FILTER ==
	# 1. UPDATING THE INITIAL STATE DISTRIBUTION
	Œº‚Çñ =   x‚ÇÄ.Œº + K(x‚ÇÄ.Œ£)*(y[:,1] - C*x‚ÇÄ.Œº)
	Œ£‚Çñ = I*x‚ÇÄ.Œ£ - K(x‚ÇÄ.Œ£)*(C*x‚ÇÄ.Œ£*C'+R)*K(x‚ÇÄ.Œ£)'

	# Creates the stack of filtering distributions X·µ§ ~ p(x‚Çñ|y‚ÇÅ,‚ãØ,y‚Çñ)
	#  and saves the initial mean and covariance.
	X‚Çë = [MvNormal(Œº‚Çñ, Symmetric(Œ£‚Çñ))];	Œº[:,1] = Œº‚Çñ; Œ£[:,:,1] = Œ£‚Çñ

	for k ‚àà 1:length(t)-1
		# 2. PREDICTION STEP
		Œº‚Åª‚Çñ = A*Œº‚Çñ + B*u[:,k]
		Œ£‚Åª‚Çñ = A*Œ£‚Çñ*A' + Q

		X‚Çö = MvNormal(Œº‚Åª‚Çñ, Symmetric(Œ£‚Åª‚Çñ))	# Predictive Distribution X‚Çö ~ p(x‚Çñ|y‚ÇÅ,‚ãØ,y‚Çñ‚Çã‚ÇÅ)

		# 3. UPDATING STEP
		Œº‚Çñ = Œº‚Åª‚Çñ + K(Œ£‚Åª‚Çñ)*(y[:,k+1] - C*Œº‚Åª‚Çñ)
		Œ£‚Çñ = Œ£‚Åª‚Çñ - K(Œ£‚Åª‚Çñ)*(C*Œ£‚Åª‚Çñ*C'+R)*K(Œ£‚Åª‚Çñ)'

		X·µ§ = MvNormal(Œº‚Çñ, Symmetric(Œ£‚Çñ))	# Filtering Distribution X·µ§ ~ p(x‚Çñ|y‚ÇÅ,‚ãØ,y‚Çñ)

		# Saves the filtering distribution X·µ§ ~ p(x‚Çñ|y‚ÇÅ,‚ãØ,y‚Çñ)
		#  and saves the current mean and covariance.
		X‚Çë = [X‚Çë; X·µ§]; Œº[:,k+1] = Œº‚Çñ; Œ£[:,:,k+1] = Œ£‚Çñ
	end
	# ====

	return (X‚Çë, Œº, Œ£)
end

# ===================
