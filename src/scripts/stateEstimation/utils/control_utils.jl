# ==== Libraries ====
using LinearAlgebra, Distributions, StatsBase, Random, PDMats
using ControlSystems

# ===================

# ==== Functions ====
# (Y,T,X) = SIM(SYS,U,T,X‚ÇÄ;Q=nothing,R=nothing,MODE="nonlinear")
# 	Simulates the discrete-time state-space system given by the model SYS.
#	Given a input sequence U = [u‚ÇÅ,‚ãØ,u‚Çú] for a time-span T = [t‚ÇÄ, t‚Çú], computes the simulation
#		MODE == "nonlinear"			MODE =="linear"
#		x‚Çñ‚Çä‚ÇÅ = f(x‚Çñ, u‚Çñ)			x‚Çñ‚Çä‚ÇÅ = Ax‚Çñ + Bu‚Çñ
#		y‚Çñ	 = g(x‚Çñ)				y‚Çñ	 = Cx‚Çñ
#	with initial state x‚ÇÄ given by the arguments.
#	If Q or R are different than "nothing", the function simulates the stochastic system
#		MODE == "nonlinear"			MODE =="linear"
#		x‚Çñ‚Çä‚ÇÅ = f(x‚Çñ, u‚Çñ) + v‚Çñ		x‚Çñ‚Çä‚ÇÅ = Ax‚Çñ + Bu‚Çñ + v‚Çñ
#		y‚Çñ	 = g(x‚Çñ)	 + z‚Çñ		y‚Çñ	 = Cx‚Çñ		 + z‚Çñ
#	with V‚Çñ ~ ùìù(0,Q), Z‚Çñ ~ ùìù(0,R), and initial state x‚ÇÄ given by the arguments.
#
function sim(sys, u, t, x‚ÇÄ; Q=nothing, R=nothing, mode="nonlinear")
	# Auxiliary variables
	(f,g,A,B,C,Œît,N‚Çì,N·µß,N·µ§) = sys
	t = t[1]:Œît:t[end]
	mode = lowercase(mode)

	x = zeros(N‚Çì, length(t))	# List of state-vectors x = [x‚ÇÅ,‚ãØ,x‚Çú]
	y = zeros(N·µß, length(t))	# List of output-vectors y = [y‚ÇÅ,‚ãØ,y‚Çú]

	# Create the distributions for the random noise variables
	if Q != nothing; V‚Çñ = MvNormal(zeros(N‚Çì), Q)	# V‚Çñ ~ ùìù(0,Q)
	else 			 V‚Çñ = [0]
	end

	if R != nothing; Z‚Çñ = MvNormal(zeros(N·µß), R)	# Z‚Çñ ~ ùìù(0,R)
	else 			 Z‚Çñ = [0]
	end

	# == SIMULATION LOOP ==
	# Initial state
	x[:,1] = x‚ÇÄ + rand(V‚Çñ)

	# Intermediate state transitions and emissions
	for k ‚àà 1:length(t)-1
		if mode == "nonlinear"
			x[:,k+1] = f(x[:,k], u[:,k]) + rand(V‚Çñ)
			y[:,k]   = g(x[:,k]) 		 + rand(Z‚Çñ)
		elseif mode == "linear"
			x[:,k+1] = A*x[:,k] + B*u[:,k]  + rand(V‚Çñ)
			y[:,k]   = C*x[:,k] 			+ rand(Z‚Çñ)
		else
			println("!!! Illegal parameter (MODE) !!!")
		end
	end

	# Last state emission
	if mode == "nonlinear";  y[:,end] = g(x[:,end]) + rand(Z‚Çñ)
	elseif mode == "linear"; y[:,end] = C*x[:,end]  + rand(Z‚Çñ)
	end

	# ====

	return (y,t,x)
end
